# Envoy sidecar for gRPC ASGI Django Demo.
#
# This transcodes incoming JSON API requests into gRPC, and forwards "safe" gRPC
# calls.
static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8080
      filter_chains:
        - filters:
            - name: envoy.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: /dev/stdout
                codec_type: auto
                stat_prefix: ingress_http
                use_remote_address: true
                local_reply_config:
                  # Reply configuration for things generated by Envoy.
                  #
                  # This remaps the errors from the default `text/plain`
                  # representation into JSON which matches google.rpc.Status,
                  # for consistency with the OpenAPI specification.
                  mappers:
                    # Bad Request (ProtoJSON validation error)
                    - filter:
                        status_code_filter:
                          comparison:
                            op: EQ
                            value:
                              default_value: 400
                              runtime_key: key_status_code_400
                      body_format_override:
                        json_format: # google.rpc.Status
                          code: 3 # INVALID_ARGUMENT
                          message: "%LOCAL_REPLY_BODY%"
                          details: []

                    # Not Found (unknown API method path)
                    #
                    # Not *really* defined by OAS, but means if there's an OAS
                    # client method that references a method we don't know
                    # about, we can return a useful error.
                    - filter:
                        status_code_filter:
                          comparison:
                            op: EQ
                            value:
                              default_value: 404
                              runtime_key: key_status_code_404
                      # Normally, Envoy returns 404 for unknown methods/paths,
                      # but gRPC returns UNIMPLEMENTED which maps to HTTP 501.
                      #
                      # However, 501 is a server-class error, which a (bad)
                      # client might retry. Keeping it as 404 makes it a little
                      # clearer, and prevents a bad client from triggering some
                      # server error alerts.
                      #
                      # In the case that Envoy knows about an API but the gRPC
                      # backend does not, then it'll return a HTTP 501. That's
                      # more clearly a server-side screw-up.
                      body_format_override:
                        json_format: # google.rpc.Status
                          code: 12 # UNIMPLEMENTED
                          message: "%LOCAL_REPLY_BODY%"
                          details: []

                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains: ["*"]
                      routes:
                        # Pass through health check over gRPC
                        - match:
                            prefix: "/grpc.health.v1.Health/Check"
                            grpc: {}
                          route:
                            cluster: grpc-asgi-server

                        # Pass through reflection over gRPC
                        - match:
                            prefix: "/grpc.reflection.v1alpha.ServerReflection/ServerReflectionInfo"
                            grpc: {}
                          route:
                            cluster: grpc-asgi-server

                        # DemoServer gRPC API
                        - match:
                            prefix: "/grpc_asgi_django_demo.proto.v1.DemoService"
                            grpc: {}
                          route:
                            cluster: grpc-asgi-server

                        # DemoServer JSON API
                        - match:
                            prefix: "/api/"
                          route:
                            cluster: grpc-asgi-server

                        # Drop other gRPC API calls
                        - match:
                            prefix: "/"
                            grpc: {}
                          direct_response:
                            # Must be 404 to trigger `grpc_reflection.v1alpha`
                            # fallbacks.
                            status: 404
                            body:
                              inline_string: "Not found"

                        # Django/ASGI handler
                        - match:
                            prefix: "/"
                          route:
                            cluster: grpc-asgi-server
                            append_x_forwarded_host: true
                            auto_host_rewrite: true

                http_filters:
                  # Expose backend health status as /health
                  #
                  # This returns HTTP 200 OK on success.
                  - name: envoy.filters.http.health_check
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
                      pass_through_mode: false
                      cluster_min_healthy_percentages:
                        "grpc-asgi-server":
                          value: 1
                      headers:
                        - name: ":path"
                          string_match:
                            exact: "/health"

                  - name: "envoy.filters.http.lua"
                    # Allow returning custom HTTP response codes from gRPC-JSON transcoder
                    # https://github.com/envoyproxy/envoy/issues/21839#issuecomment-1164916248
                    typed_config:
                      "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
                      default_source_code:
                        filename: /etc/envoy/x_http_code_as_status.lua

                  - name: envoy.filters.http.grpc_json_transcoder
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder
                      proto_descriptor: /etc/envoy/service.binpb
                      match_incoming_request_route: true
                      services:
                        - grpc_asgi_django_demo.proto.v1.DemoService
                        - grpc_asgi_django_demo.proto.v1.AsgiService
                      capture_unknown_query_parameters: true
                      convert_grpc_status: true
                      request_validation_options:
                        reject_unknown_method: true
                      print_options:
                        add_whitespace: false
                        always_print_primitive_fields: true
                        always_print_enums_as_ints: false
                        preserve_proto_field_names: false

                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
    # gRPC ASGI server
    - name: grpc-asgi-server
      type: STRICT_DNS
      dns_lookup_family: V4_ONLY
      connect_timeout: 0.25s
      typed_extension_protocol_options:
        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
          "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
          explicit_http_config:
            http2_protocol_options: {}
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: grpc-asgi-server
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: grpc-asgi-server
                      port_value: 8081
          - lb_endpoints:
              # When running on AWS Fargate, the other container is available
              # via `localhost`, rather than inter-task networking:
              # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-task-networking.html
              - endpoint:
                  address:
                    socket_address:
                      address: localhost
                      port_value: 8081
      health_checks:
        # NB: when all health checks fail, it does not stop traffic going to the
        # cluster. 
        - grpc_health_check:
            service_name: "grpc_asgi_django_demo.proto.v1.AsgiService"
          timeout: "10s"
          interval: "30s"
          interval_jitter: "5s"
          unhealthy_interval: "10s"
          unhealthy_threshold: 1
          healthy_threshold: 1
